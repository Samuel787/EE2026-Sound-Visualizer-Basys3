`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// National University of Singapore
// Department of Electrical and Computer Engineering
// EE2026 Digital Design
// AY1819 Semester 1
// Project: Voice Scope
//////////////////////////////////////////////////////////////////////////////////

module Voice_Scope_TOP(
    input CLK,
    input sw1,
    input sw9,
    input sw_e,
    input sw10,
    input sw12,
    input sw13,
    input sw15,
    input btnC,
    input btnU,
    input btnL,
    input btnR,
    input btnD,
    input sw2,
    input sw3,
    input sw4,
    input sw5,
    input sw6,
    input sw7,
    input sw8,
    input sw11,
    input sw14,
    input  J_MIC3_Pin3,   // PmodMIC3 audio input data (serial)
    output J_MIC3_Pin1,   // PmodMIC3 chip select, 20kHz sampling clock
    output J_MIC3_Pin4,   // PmodMIC3 serial clock (generated by module VoiceCapturer.v)
   
    output [3:0] VGA_RED,    // RGB outputs to VGA connector (4 bits per channel gives 4096 possible colors)
    output [3:0] VGA_GREEN,
    output [3:0] VGA_BLUE,
    
    output VGA_VS,          // horizontal & vertical sync outputs to VGA connector
    output VGA_HS,
    output [11:0] led,
    output[7:0] seg,
    output [3:0] an
    );
             
       
//-----------------------------------------------------------------------------
//                  STUDENT A - MIC
//-----------------------------------------------------------------------------

    
// Please create a clock divider module to generate a 20kHz clock signal. 
// Instantiate it below

//CLOCK WIRES
    wire clk_20khz, clk_2hz, clk_80hz, clk_12hz, clk_vga, clk_30hz, clk_5hz;
    
//WAVE WIRES
    wire[11:0] live_sound_wave;
    wire[9:0] test_wave;
    wire[9:0] result_wave;
    wire[11:0] max_result_wave; //this is for LED and 7seg display 
    
//MY CLOCK DIVIDER MODULES
    my_clk_div clk_div_20khz(CLK, 2499, clk_20khz);
    my_clk_div clk_div_2hz(CLK, 24999999,clk_2hz);
    my_clk_div clk_div_80hz(CLK, 624999, clk_80hz);
    my_clk_div clk_div_12hz(CLK, 4166666, clk_12hz); 
    my_clk_div clk_div_30hz(CLK, 1666665, clk_30hz);
    my_clk_div clk_div_5hz(CLK, 1999, clk_5hz);
    
    Voice_Capturer(CLK, clk_20khz, J_MIC3_Pin3, J_MIC3_Pin1, J_MIC3_Pin4, live_sound_wave);
    TestWave_Gen(clk_20khz, test_wave);
    
 //GENERATING A PSEUDO WAVE   
    wire[9:0] my_pseudo_wave;
    wire [30:0] variable_m;
    wire [9:0] variable_A; 
    custom_wave_module adjust_wave(clk_80hz, btnU, btnD, btnL, btnR,
    sw11, variable_m, variable_A);
    wire clk_for_pseudo;
    my_clk_div clk_div_clk_pseudo(CLK, variable_m, clk_for_pseudo);
    
    pseudo_wave_gen get_pseudo_wave(clk_for_pseudo, clk_80hz, variable_A,  
    sw11, sw13, sw14, sw15, btnC, my_pseudo_wave);
    
    assign result_wave = (sw1 || (sw15 && !sw11)) ? live_sound_wave[11:2] :
                         (sw15 && sw11) ? my_pseudo_wave:
                          test_wave;
    
//LED and 7seg modules    
    my_running_max get_max(clk_20khz, live_sound_wave, max_result_wave);
    my_led_display_module set_up_led(clk_5hz, max_result_wave, led);
    my_anode_display_module set_up_anode(clk_20khz, led, an, seg);
    
   
       
// Please instantiate the voice capturer module below
  

//-----------------------------------------------------------------------------
//                  STUDENT B - VGA
//-----------------------------------------------------------------------------
   
 // WIRES FOR BUTTON PRESSES
    //wire btn_u, btn_r, btn_l, btn_b, btn_c;
    
    wire [11:0] VGA_HORZ_COORD;
    wire [11:0] VGA_VERT_COORD; 
    
// Please instantiate the waveform drawer module below
    
    wire [3:0] VGA_Red_waveform;
    wire [3:0] VGA_Green_waveform;
    wire [3:0] VGA_Blue_waveform;
    wire [9:0] wave_sample; 
    
  
    

// Please instantiate the background drawing module below   
    wire [3:0] red_wave;
    wire [3:0] green_wave;
    wire [3:0] blue_wave;
    
    wire [3:0] VGA_Red_grid;
    wire [3:0] VGA_Green_grid;
    wire [3:0] VGA_Blue_grid;
    
    wire [3:0] VGA_Red_Main_grid;
    wire [3:0] VGA_Green_Main_grid;
    wire [3:0] VGA_Blue_Main_grid;
    
    wire [3:0] VGA_Red_sub_grid;
    wire [3:0] VGA_Green_sub_grid;
    wire [3:0] VGA_Blue_sub_grid;
    
    wire [3:0] VGA_Red_ticks;
    wire [3:0] VGA_Green_ticks;
    wire [3:0] VGA_Blue_ticks;
    
    wire [3:0] VGA_Bg_red;
    wire [3:0] VGA_Bg_green;
    wire [3:0] VGA_Bg_blue;
    
//instantiating the sound bar
    wire [3:0] sound_level;
    wire sound_bar_text;
    my_sound_bar sound_bar(clk_vga, clk_20khz, max_result_wave, VGA_HORZ_COORD, VGA_VERT_COORD, sound_level, sound_bar_text);  
  
 //INSTANTIATING THE SOUND SCREEN
    wire [2:0] sound_texts;
    wire [11:0] average_wave;
    wire [11:0] minimum_wave;
    wire [4:0] max_first;
    wire [4:0] max_first_text;
    my_running_avg run_avg(clk_20khz, live_sound_wave, average_wave);
    my_running_min run_min(clk_20khz, live_sound_wave, minimum_wave);
    
    sound_specs_screen my_sound_specs(clk_vga, clk_20khz, 
    VGA_HORZ_COORD, VGA_VERT_COORD,
    max_result_wave, average_wave, minimum_wave,
    sound_texts,
    max_first, max_first_text);
    
 //INSTANTIATING THEME SELECTOR
    theme_selector(clk_80hz, btnU, btnD, btnL, btnR, btnC, 
    sw2, sw3, sw4, sw5, sw6, sw_e,sw11, sw15, sw14, sw13, max_result_wave,
    red_wave, green_wave, blue_wave, 
    VGA_Red_sub_grid, VGA_Green_sub_grid, VGA_Blue_sub_grid,
    VGA_Red_ticks, VGA_Green_ticks, VGA_Blue_ticks,
    VGA_Red_Main_grid, VGA_Green_Main_grid, VGA_Blue_Main_grid,
    VGA_Bg_red, VGA_Bg_green, VGA_Bg_blue);     

//INSTANTIATING BULLET COLOR SELECTOR
    wire [3:0] bullet_red, bullet_green, bullet_blue;
    my_bullet_color_selector bullet_selector(clk_80hz, max_result_wave, bullet_red, bullet_green, bullet_blue);

//INSTANTIATING ENEMY COLOR SELECTOR
    wire [3:0] enemy_red, enemy_green, enemy_blue;
    reg [3:0] random_num; //wire this into a random number generator module
    enemy_color_selector enemey_color(clk_vga, random_num, enemy_red, enemy_green, enemy_blue);
    
// Please instantiate the VGA display module below     
     Draw_Waveform draw_waveform(clk_20khz, clk_vga, clk_80hz,
     sw2, sw_e, sw7, sw8, sw9, sw13, sw14, sw15, btnU, btnD,
     max_result_wave, result_wave, VGA_HORZ_COORD, VGA_VERT_COORD,
     red_wave, green_wave, blue_wave,
     VGA_Bg_red, VGA_Bg_green, VGA_Bg_blue,
     VGA_Red_grid, VGA_Green_grid, VGA_Blue_grid,
     VGA_Red_waveform, VGA_Green_waveform, VGA_Blue_waveform);
     
     wire[4:0] main_menu_words;
     project_menu_screen menu_screen(clk_vga, VGA_HORZ_COORD, VGA_VERT_COORD, main_menu_words);
     
     
     //GAME TEXTS
         wire[20:0] game_texts;
          game_texts(clk_vga, VGA_HORZ_COORD, VGA_VERT_COORD, game_texts); 
     
     //HELP SCREEN
     wire[30:0] help_texts;
     help_screen help(clk_vga, VGA_HORZ_COORD, VGA_VERT_COORD, help_texts);
     
     Draw_Background draw_background(clk_vga, CLK, clk_12hz, clk_80hz, clk_30hz, clk_20khz, sw9, sw10, sw11, sw12, 
     sw13, sw14, sw15, result_wave, max_result_wave[11:2],
     max_result_wave, live_sound_wave, VGA_HORZ_COORD, VGA_VERT_COORD,
     VGA_Red_sub_grid, VGA_Green_sub_grid, VGA_Blue_sub_grid,
     VGA_Red_ticks, VGA_Green_ticks, VGA_Blue_ticks,
     VGA_Red_Main_grid, VGA_Green_Main_grid, VGA_Blue_Main_grid,
     VGA_Bg_red, VGA_Bg_green, VGA_Bg_blue,
     main_menu_words, sound_level, sound_bar_text,
     sound_texts, max_first, max_first_text, game_texts, help_texts,
     VGA_Red_grid, VGA_Green_grid, VGA_Blue_grid);
     
     VGA_DISPLAY(CLK, VGA_Red_waveform, VGA_Green_waveform, VGA_Blue_waveform, VGA_Red_grid, VGA_Green_grid, VGA_Blue_grid, VGA_HORZ_COORD, VGA_VERT_COORD, VGA_RED, VGA_GREEN, VGA_BLUE, VGA_VS, VGA_HS, clk_vga);
                    
endmodule
